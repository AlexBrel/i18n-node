{"name":"I18n-node","tagline":"Lightweight simple translation module for node.js / express.js with dynamic json storage. Uses common __('...') syntax in app and templates.","body":"# i18n\r\n\r\nLightweight simple translation module with dynamic json storage. \r\nUses common __('...') syntax in app and templates.\r\nStores language files in json files compatible to [webtranslateit](http://webtranslateit.com/) json format.\r\nAdds new strings on-the-fly when first used in your app.\r\nNo extra parsing needed.\r\n\r\n[![Build Status](https://secure.travis-ci.org/mashpie/i18n-node.png?branch=master)](http://travis-ci.org/mashpie/i18n-node)\r\n\r\n## Install\r\n\r\n\tnpm install i18n\r\n\t\r\n## Test \r\n\r\n\tnpm test\r\n\r\n## Load\r\n```js\r\n\t// load modules\r\n\tvar express = require('express'),\r\n\t    i18n = require(\"i18n\");\r\n```\r\n\r\nnow you are ready to use a global `i18n.__('Hello')`. **Global** assumes you share a common state of localizsation in any time and any part of your app. This is usually fine in cli-style scripts. When serving responses to http requests you'll need to make sure that scope is __NOT__ shared globally but attached to your request object.\r\n\r\n## Configure\r\n\r\nMinimal example, just setup two locales\r\n\r\n    i18n.configure({\r\n        locales:['en', 'de']\r\n    });\r\n\r\n optionally register helpers to _global_ scope in your cli. \r\n\r\n\ti18n.configure({\r\n\t    locales:['en', 'de'],\r\n        register: global \r\n\t});\r\n\r\n **Be warned**: Globals are only intended to get used in cli-like apps. To avoid concurency issues in server-like apps you'll need to attach helpers on your own to any kind of request- or response-object \r\n\r\n### list of configuration options\r\n\r\n\ti18n.configure({\r\n\t    // setup some locales - other locales default to en silently\r\n\t    locales:['en', 'de'],\r\n\r\n\t    // sets a custom cookie name to parse locale settings from\r\n\t    cookie: 'yourcookiename',\r\n\r\n\t    // where to store json files - defaults to './locales'\r\n\t    directory: './mylocales',\r\n\r\n\t    // whether to write new locale information to disk - defaults to true\r\n\t    updateFiles: false,\r\n\r\n\t    // setting extension of json files - defaults to '.js' (according to webtranslateit)\r\n\t    extension: '.json',\r\n\r\n\t    // enabled some debug output - defaults to false\r\n\t    debug: true\r\n\r\n\t});\r\n\r\n## Basic global use\r\n\r\nIn your app, when registered global:\r\n\r\n\tvar greeting = __('Hello');\r\n\r\nin your app, when not registered to a specific object:\r\n\r\n\tvar greeting = i18n.__('Hello');\r\n\r\n## Example usage in express.js\r\n\r\nIn an express app, you might use i18n.init to gather language settings of your visitors and also bind your helpers to response object honoring request objects locale, ie:\r\n\r\n\t// Configuration\r\n\tapp.configure(function() {\r\n\r\n    \t[...]\r\n\r\n\t    // default: using 'accept-language' header to guess language settings\r\n\t    app.use(i18n.init);\r\n\r\n\t    // binding template helpers to request (Credits to https://github.com/enyo #12)\r\n\t\tapp.use(function(req, res, next) {\r\n\t\t  res.locals.__ = function() {\r\n\t\t    return i18n.__.apply(req, arguments);\r\n\t\t  };\r\n\t\t  res.locals.__n = function() {\r\n\t\t    return i18n.__n.apply(req, arguments);\r\n\t\t  };\r\n\t\t});\r\n\r\n\t    app.use(app.router);\r\n\t    app.use(express.static(__dirname + '/public'));\r\n\t});\r\n\r\nin your app, when registered to a request object by `i18n.init`:\r\n\r\n\tapp.get('/de', function(req, res){\r\n      var greeting = req.__('Hello');\r\n    });\r\n\r\n\r\nin your template (depending on your template compiler)\r\n\t\r\n\t<%= __('Hello') %>\r\n\t\r\n\t${__('Hello')}\r\n\t\r\n\r\n## Output parsing of expressions\r\n\r\nAs inspired by gettext there is currently support for sprintf-style expressions. Named parameters are on roadmap.\r\n\r\n### sprintf support\r\n\r\n\tvar greeting = __('Hello %s, how are you today?', 'Marcus');\r\n\t\r\nthis puts *Hello Marcus, how are you today?*. You might add endless arguments and even nest it.\r\n\r\n\tvar greeting = __('Hello %s, how are you today? How was your %s.', 'Marcus', __('weekend'));\r\n\t\r\nwhich puts *Hello Marcus, how are you today? How was your weekend.*\r\n\r\n### variable support\r\n\r\nyou might even use dynamic variables as they get interpreted on the fly. Better make sure no user input finds it's way to that point as they all get added to the `en.js` file if not yet existing.\r\n\r\n\tvar greetings = ['Hi', 'Hello', 'Howdy'];        \r\n    for (var i=0; i < greetings.length; i++) {\r\n        console.log( __(greetings[i]) );\r\n    };\r\n\r\nwhich puts \r\n\r\n\tHi\r\n\tHello\r\n\tHowdy\r\n\r\n### basic plural support\r\n\r\ndifferent plural froms are supported as response to `count`:\r\n\r\n\tvar singular = __n('%s cat', '%s cats', 1);\r\n    var plural = __n('%s cat', '%s cats', 3);\r\n\r\nthis puts **1 cat** or **3 cats**\r\nand again these could get nested:\r\n\r\n\tvar singular = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 1, 'tree');\r\n\tvar plural = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 3, 'tree');\r\n\t\r\nputting *There is one monkey in the tree* or *There are 3 monkeys in the tree*\r\n\r\n## Storage\r\n\r\nWill get modular support for different storage engines, currently just json files are stored in filesystem.\r\n\r\n### json file\r\n\r\nthe above will automatically generate a `en.js` by default inside `./locales/` which looks like\r\n\r\n\t{\r\n\t\t\"Hello\": \"Hello\",\r\n\t\t\"Hello %s, how are you today?\": \"Hello %s, how are you today?\",\r\n\t\t\"weekend\": \"weekend\",\r\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hello %s, how are you today? How was your %s.\",\r\n\t\t\"Hi\": \"Hi\",\r\n\t\t\"Howdy\": \"Howdy\",\r\n\t\t\"%s cat\": {\r\n\t\t\t\"one\": \"%s cat\",\r\n\t\t\t\"other\": \"%s cats\"\r\n\t\t},\r\n\t\t\"There is one monkey in the %%s\": {\r\n\t\t\t\"one\": \"There is one monkey in the %%s\",\r\n\t\t\t\"other\": \"There are %d monkeys in the %%s\"\r\n\t\t},\r\n\t\t\"tree\": \"tree\"\r\n\t}\r\n\r\nthat file can be edited or just uploaded to [webtranslateit](http://docs.webtranslateit.com/file_formats/) for any kind of collaborative translation workflow:\r\n\r\n\t{\r\n\t\t\"Hello\": \"Hallo\",\r\n\t\t\"Hello %s, how are you today?\": \"Hallo %s, wie geht es dir heute?\",\r\n\t\t\"weekend\": \"Wochenende\",\r\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hallo %s, wie geht es dir heute? Wie war dein %s.\",\r\n\t\t\"Hi\": \"Hi\",\r\n\t\t\"Howdy\": \"HallÃ¶chen\",\r\n\t\t\"%s cat\": {\r\n\t\t\t\"one\": \"%s Katze\",\r\n\t\t\t\"other\": \"%s Katzen\"\r\n\t\t},\r\n\t\t\"There is one monkey in the %%s\": {\r\n\t\t\t\"one\": \"Im %%s sitzt ein Affe\",\r\n\t\t\t\"other\": \"Im Baum sitzen %d Affen\"\r\n\t\t},\r\n\t\t\"tree\": \"Baum\"\r\n\t}\r\n\r\nremember to turn off automatic locale file updates:\r\n\r\n\ti18n.configure({\r\n\t    updateFiles: false\r\n\t});\r\n\r\n## Changelog\r\n\r\n* 0.3.7: tests by mocha.js, added `this.locale` to `__` and `__n` \r\n* 0.3.6: travisCI, writeFileSync, devDependencies, jslint, MIT, fixed: #29, #9, merged: #25, #30, #43\r\n* 0.3.5: fixed some issues, prepared refactoring, prepared publishing to npm finally\r\n* 0.3.4: merged pull request #13 from Fuitad/master and updated README\r\n* 0.3.3: merged pull request from codders/master and modified for backward compatibility. Usage and tests pending\r\n* 0.3.2: merged pull request #7 from carlptr/master and added tests, modified fswrite to do sync writes\r\n* 0.3.0: added configure and init with express support (calling guessLanguage() via 'accept-language')\r\n* 0.2.0: added plurals\r\n* 0.1.0: added tests\r\n* 0.0.1: start \r\n\r\n## Licensed under MIT\r\n\r\nCopyright (c) 2011-2013 Marcus Spiegel <marcus.spiegel@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}